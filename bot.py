#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  bot.py
#
#  Copyright 2017 –°–µ—Ä–≥–µ–π <sergey@Sergey-Tux2>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#


import config
import re
import telebot
import time
import parser
from secret_config import TOKEN_NAME as token
from dates_config import today_date, tomorrow_date, datetime_object_date
from parser import get_scheldue, get_grp_list
from UseDB import opendb
from datetime import date, timedelta, datetime
import os
from telebot import types

bot = telebot.TeleBot(token)

@bot.message_handler(commands=['all'])
def send_to_all(message):
	if message.chat.id != 64634999:
		return
	#–î–æ–ø–∏—Å–∞—Ç—å for –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º

@bot.message_handler(commands=['start'])
def handle_start(message):
	print('\nStart ', message.chat.id, datetime.now())
	if opendb().find_usr(message) != None:
		bot.send_message(message.chat.id, config.startagain)
		handle_help(message)
		return

	msg = bot.send_message(message.chat.id, config.start)
	bot.register_next_step_handler(msg, regestration)

def regestration(message):
	all_groups = get_grp_list()
	if not (message.text in all_groups):
		opendb().ins_id(message)
		gr_failture = bot.send_message(message.chat.id, config.completef)
		
		bot.register_next_step_handler(gr_failture, change_gr)
		
	else:
		opendb().ins_all(message)
		bot.send_message(message.chat.id, config.completet)
		current_func = ''
		handle_help(message)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
@bot.message_handler(commands=['help'])  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
def handle_help(message):
	print('\nHelp ', message.chat.id, datetime.now())
	markup = telebot.types.ReplyKeyboardMarkup()
	markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏')
	markup.row('–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –Ω–µ–¥–µ–ª—è?', '–ö–æ–≥–¥–∞ —É–∂–µ –¥–æ–º–æ–π?')
	markup.row('–ü—Ä–æ—á–µ–µ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
	bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', reply_markup=markup)  # –í—ã–≤–æ–¥–∏—Ç –∏—Ö –∫–∞–∫ –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
@bot.message_handler(commands=['settings'])  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
def handle_settings(message):
	print(datetime.now(), "\n–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç ", message.chat.id)
	markup = telebot.types.ReplyKeyboardMarkup()
#	markup.row('–û–ø–æ–≤–µ—â–µ–Ω–∏—è')
	markup.row('üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
	markup.row('‚ùå –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
	markup.row('–ù–∞–∑–∞–¥')
	bot.send_message(message.chat.id, '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)
	global current_func
	current_func = 'options'


@bot.message_handler(func=lambda message: message.text == '–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –Ω–µ–¥–µ–ª—è?')
def now_week(message):
	print('\n–ù–µ–¥–µ–ª—è ', message.chat.id, datetime.now())
	sended_message = ('–°–µ–π—á–∞—Å –≤–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è!' if datetime.now().isocalendar()[1] - (
		34 if datetime.now().isocalendar()[1] < 31 else 0) % 2 == 1 else '–°–µ–π—á–∞—Å –Ω–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è!')
	bot.send_message(message.chat.id, sended_message)


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏')
def session_menu(message):
	print('\n–ú–µ–Ω—é —Å–µ—Å—Å–∏–∏ ', message.chat.id, datetime.now())
	markup = telebot.types.ReplyKeyboardMarkup()
	markup.row('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏?', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤')
	markup.row('–°–ª–µ–¥—É—é—â–∏–π —ç–∫–∑–∞–º–µ–Ω')
	markup.row('–ù–∞–∑–∞–¥')
	bot.send_message(message.chat.id, '–û—Ö, —Å–æ—á—É–≤—Å—Ç–≤—É—é.', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–°–ª–µ–¥—É—é—â–∏–π —ç–∫–∑–∞–º–µ–Ω')
def closest_exam(message):
	print('\n–ë–ª–∏–∂–∞–π—à–∏–π —ç–∫–∑–∞–º–µ–Ω ', message.chat.id, datetime.now())
	group_name = opendb().find_gr(message)

	sess = parser.get_session(group_name)
	sended_message = ''

	i = 0

	day = sess[i]

	if date.today().month != 1 and date.today().month != 6:
		sended_message = 4 * '=' + day[0][0:5] + ' ' + day[0][5::] + 4 * '=' + '\nüë§ ' + day[4] + '\nüìù ' + day[
			3] + '\n‚åö –ù–∞—á–∞–ª–æ –≤ ' + day[1].split(' ‚Äì ')[0] + '\nüìç ' + (
							 ('–í –∞—É–¥–∏—Ç–æ—Ä–∏–∏' + day[-1]) if not ('–ö–∞—Ñ–µ–¥—Ä–∞' in day[-1]) else '–ù–∞ –∫–∞—Ñ–µ–¥—Ä–µ') + '\n\n'
		bot.send_message(message.chat.id, sended_message)
		return

	print('session: ', sess[i][0].split()[0])

	while i < len(sess) and int(sess[i][0].split()[0].split('.')[0]) <= date.today().day:
		i += 1

	try: day = sess[i]
	except IndexError:
		sended_message = '–°–µ—Å—Å–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å!'
	else:
		sended_message = 4 * '=' + day[0][0:5] + ' ' + day[0][5::] + 4 * '=' + '\nüë§ ' + day[4] + '\nüìù ' + day[
		3] + '\n‚åö –ù–∞—á–∞–ª–æ –≤ ' + day[1].split(' ‚Äì ')[0] + '\nüìç ' + (
						 ('–í –∞—É–¥–∏—Ç–æ—Ä–∏–∏' + day[-1]) if not ('–ö–∞—Ñ–µ–¥—Ä–∞' in day[-1]) else '–ù–∞ –∫–∞—Ñ–µ–¥—Ä–µ') + '\n\n'

	bot.send_message(message.chat.id, sended_message)


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π')
def timetable_menu(message):
	print('\n–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ', message.chat.id, datetime.now())

	markup = telebot.types.InlineKeyboardMarkup()

	today_schedule = types.InlineKeyboardButton(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today_schedule')
	next_lessonInline = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞', callback_data='next_lesson')
	next_labaInline = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è –ª–∞–±–∞', callback_data='next_laba')
	next_schedule = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å', callback_data='next_schedule')
	week_schedule = types.InlineKeyboardButton(text='–ù–∞ –Ω–µ–¥–µ–ª—é', callback_data='week_schedule')

	markup.add(today_schedule, next_lessonInline, next_labaInline, next_schedule, week_schedule)

	bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏')
def session_date(message):
	print('\n–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏', message.chat.id, datetime.now())

	markup = telebot.types.InlineKeyboardMarkup()

	next_examInline = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π —ç–∫–∑–∞–º–µ–Ω', callback_data='next_exam')
	all_examsInline = types.InlineKeyboardButton(text='–ù–∞ –Ω–µ–¥–µ–ª—é', callback_data='week_schedule')

	markup.add(next_examInline, all_examsInline)

	bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ', reply_markup=markup)

@bot.message_handler(func=lambda message: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É' == message.text)
def edit_information(message):
	print(datetime.now(), "\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ—Ç ", message.chat.id, message.chat.username)
	bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú**-***-**')
	global current_func
	current_func = 'change_group'


@bot.message_handler(func=lambda message: '‚ùå –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' == message.text and current_func == 'options')
def delete(message):
	print(datetime.now(), "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç ", message.chat.id, message.chat.username)
	markup = telebot.types.ReplyKeyboardMarkup()
	markup.row('üî• –î–∞', 'üö´ –ù–µ—Ç')
	msg = bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
	bot.register_next_step_handler(msg, sure)

def sure(message):
	if message.text == 'üî• –î–∞':
		opendb().del_usr(message)
		bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
	
	else:
		handle_help(message)


@bot.message_handler(func=lambda message: message.text == '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏?')
def enspiration_date(message):
	print(datetime.now(), '–í—Ä–µ–º—è –¥–æ —Å–µ—Å—Å–∏–∏', message.chat.id, message.chat.username)
	if 2 <= date.today().month < 6:
		bot.send_message(message.chat.id,
						 '–î–æ –∏—é–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å ' + str(date(date.today().year, 6, 1) - date.today()).split()[
							 0] + ' –¥–Ω–µ–π, ' + '–µ—Å—Ç—å –µ—â—ë –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏' if int(
							 str(date(2017, 6, 1) - date.today()).split()[
								 0]) > 30 else '–º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–∞—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–µ–ø–æ–¥ –∑–Ω–∞–ª —Ö–æ—Ç—å, –∫–∞–∫ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å')
	elif 9 <= date.today().month:
		bot.send_message(message.chat.id, '–î–æ —è–Ω–≤–∞—Ä—è –æ—Å—Ç–∞–ª–æ—Å—å ' + str(int(
			str(date(date.today().year, 12, 1) - date.today()).split()[
				0]) + 31) + ' –¥–Ω–µ–π, ' + '–µ—Å—Ç—å –µ—â—ë –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏' if int(str(date(2017, 6, 1) - date.today()).split()[
																			0]) > 30 else '–º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–∞—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–µ–ø–æ–¥ –∑–Ω–∞–ª —Ö–æ—Ç—å, –∫–∞–∫ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å')
	elif date.today().month == 1 or date.today().month == 6:
		bot.send_message(message.chat.id, '–ò–Ω–æ–≥–¥–∞ –ª—é–¥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.')
	else:
		bot.send_message(message.chat.id, '–î–∞–π –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –ª–µ—Ç–æ –∂–µ!')


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤') 
def session_timetable(message):
	print('\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤', message.chat.id, datetime.now())
	group_name = opendb().find_gr(message)

	sess = parser.get_session(group_name)
	sended_message = ''

	for day in sess:
		sended_message += 4 * '=' + day[0][0:5] + ' ' + day[0][5::] + 4 * '=' + '\nüë§ ' + day[4] + '\nüìù ' + day[
			3] + '\n‚åö –ù–∞—á–∞–ª–æ –≤ ' + day[1].split(' ‚Äì ')[0] + '\nüìç ' + (
							  ('–í –∞—É–¥–∏—Ç–æ—Ä–∏–∏' + day[-1]) if not ('–ö–∞—Ñ–µ–¥—Ä–∞' in day[-1]) else '–ù–∞ –∫–∞—Ñ–µ–¥—Ä–µ') + '\n\n'

	bot.send_message(message.chat.id, sended_message)
	print(sended_message)
	
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—á–µ–µ')
def other(message):
	bot.send_message(message.chat.id, '–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ. –ù–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è :)')
	return


@bot.callback_query_handler(func=lambda call: call.data == 'next_schedule')
def next_schedule(call):
	group_name = opendb().find_gr(call.message)
	print(group_name)
	dates, schedule = get_scheldue(group_name)
	sended_message = ''
	
	nowtime = (datetime.now() + timedelta(hours=3)).strftime('%H:%M')
	
	next_date = 0
	
	if not today_date in dates or nowtime < schedule[dates.index(today_date)]['time'][0].split()[0]:
		search_date = 0
	elif tomorrow_date in dates and nowtime > schedule[dates.index(today_date)]['time'][0].split()[0]:
		search_date = dates.index(tomorrow_date)
	else:
		search_date = 1
	

	try:
		day = schedule[search_date]
		sended_message += '===={}====\n'.format(dates[search_date])
		for j in range(len(schedule[search_date]['title'])):
			sended_message += '‚åö' + day['time'][j] + '\nüìù' + day['title'][j] + (('\nüë§' + day['lecturer'][j]['name']) if (day['lecturer'][j]['name'] != 'None') else '') + ('\nüìç' + day['location'][j] + '\n' if day['location'][j] != 'None' else '\n') + day['type'][j] + '\n'
			sended_message += '''
			'''
	except ValueError:
		sended_message = '–ü–∞—Ä –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π :)'
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=sended_message)

@bot.callback_query_handler(func=lambda call: call.data == 'today_schedule')
def tomorrow_table(call):
	group_name = opendb().find_gr(call.message)
	print(group_name)
	dates, schedule = get_scheldue(group_name)
	sended_message = ''
	search_date = today_date

	try:
		i = dates.index(search_date)
		sended_message += '===={}====\n'.format(dates[i])
		for j in range(len(schedule[i]['title'])):
			print()
			sended_message += '‚åö' + schedule[i]['time'][j] + '\nüìù' + schedule[i]['title'][j] + (('\nüë§' + schedule[i]['lecturer'][j]['name']) if (schedule[i]['lecturer'][j]['name'] != 'None') else '') + ('\nüìç' + schedule[i]['location'][j] + '\n' if schedule[i]['location'][j] != 'None' else '\n') + schedule[i]['type'][j] + '\n'
			sended_message += '''
			'''
	except ValueError:
		sended_message = '–ü–∞—Ä –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π :)'

	print('\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–°–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞):\n\n', group_name, '\n', sended_message, '\n')
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=sended_message)


@bot.callback_query_handler(func=lambda call: call.data == 'next_lesson') 
def next_lesson(call):
	group_name = opendb().find_gr(call.message)
	
	dates, schedule = get_scheldue(group_name) #–í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É
	sended_message = '' 

	search_date = today_date

	try:
		i = dates.index(search_date)
		day = schedule[i] #–ë–µ—Ä–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
		j = 0
		nowtime = (datetime.now() + timedelta(hours=3)).strftime('%H:%M') #–ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
		
		while sended_message == '' and j < len(day['time']):
			tdy_time = day['time'][j]

			if nowtime < tdy_time.split()[0]:
				lctr = 'üë§{}\n'.format(day['lecturer'][j]['name']) if (day['lecturer'][j]['name'] != 'None') else ''
				lctn = 'üìç{}\n'.format(day['location'][j]) if day['location'][j] != 'None' else '\n'
				
				sended_message = '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: \n\n===== {} =====\n‚åö {}\nüìù{}\n{}{}{}'.format(dates[i], day['time'][j], day['title'][j], lctr, lctn, day['type'][j])

			j += 1
			
		if sended_message == '':
			day = schedule[dates.index(tomorrow_date)]
			lctr = 'üë§{}\n'.format(day['lecturer'][0]['name']) if (day['lecturer'][0]['name'] != 'None') else ''
			lctn = 'üìç{}\n'.format(day['location'][0]) if day['location'][0] != 'None' else '\n'
			sended_message = '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: \n\n===== {} =====\n‚åö {}\nüìù{}\n{}{}{}'.format(dates[i], day['time'][0], day['title'][0], lctr, lctn, day['type'][0])
#			sended_message = '–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä, –æ—Ç–¥—ã—Ö–∞–π :)'
		
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=sended_message)
		
	except Exception as e:
		sended_message = '–¢—É—Ç –æ—à–∏–±–∫–∞'
		bot.send_message(call.message.chat.id, sended_message)
		bot.send_message(64634999, '–°–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –Ω–µ –Ω–∞—à–µ–ª —É ' + group_name + '–ø–æ –ø—Ä–∏—á–∏–Ω–µ ' + e)
	

@bot.message_handler(func=lambda message: '–ö–æ–≥–¥–∞ —É–∂–µ –¥–æ–º–æ–π?' == message.text)
def when_freedom(message):
	print(datetime.now(), "\n–ö–æ–≥–¥–∞ –¥–æ–º–æ–π ", message.chat.id, message.chat.username)
	group_name = opendb().find_gr(message)
	print(group_name)
	dates, schedule = get_scheldue(group_name)
	sended_message = ''

	try:
		i = dates.index(today_date)

		for j in range(len(schedule[i]['time'])):

			lesson_start_time = re.findall(r'\d\d:\d\d', schedule[i]['time'][j])[0]
			lesson_end_time = re.findall(r'\d\d:\d\d', schedule[i]['time'][j])[1]

			if lesson_start_time < datetime.now().strftime('%H:%M:%S') < lesson_end_time:
				hour = int(lesson_end_time[0:2]) - int(datetime.now().strftime('%H'))
				minute = int(lesson_end_time[3:5]) - int(datetime.now().strftime('%M'))

				if minute < 0:
					hour -= 1
					minute += 60

				time_end = str(hour) + ':' + str(minute) if len(str(minute)) > 1 else str(hour) + ':0' + str(minute)

			elif lesson_start_time > datetime.now().strftime(
					'%H:%M:%S') and buf != lesson_start_time:
				i += 1
			buf = lesson_start_time

		if i > 1:
			if time_end != '':
				sended_message = '–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {} –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã, –∞ –ø–æ—Ç–æ–º –µ—â—ë {} –ø–∞—Ä—ã'.format(time_end, str(i))

			else:
				sended_message = '–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {} –ø–∞—Ä—ã'.format(str(i))
		elif i == 1:
			if time_end != '':
				sended_message = '–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {} –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã, –∞ –ø–æ—Ç–æ–º –µ—â—ë 1 –ø–∞—Äa'.format(time_end)

			else:
				sended_message = '–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë 1 –ø–∞—Äa'
		else:
			if time_end != '':
				sended_message = '–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {} –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã, –∞ –ø–æ—Ç–æ–º –¥–æ–º–æ–π!'.format(time_end)

			else:
				sended_message = '–¢—ã —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'


	except ValueError:
		sended_message = '–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω!'



	bot.send_message(message.chat.id, sended_message)
	print('\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ö–æ–≥–¥–∞ –¥–æ–º–æ–π):\n\n', group_name, sended_message, '\n')


@bot.callback_query_handler(func=lambda call: call.data == 'week_schedule')
def week_table(call):
	group_name = opendb().find_gr(call.message)
	print(group_name)
	dates, schedule = get_scheldue(group_name)
	sended_message = ''

	print(dates)
	for i in range(len(dates)):
		sended_message += '===={}====\n'.format(dates[i])
		for j in range(len(schedule[i]['title'])):
			print()
			sended_message += '‚åö' + schedule[i]['time'][j] + '\nüìù' + schedule[i]['title'][j] + (('\nüë§' + schedule[i]['lecturer'][j]['name']) if (schedule[i]['lecturer'][j]['name'] != 'None') else '') + ('\nüìç' + schedule[i]['location'][j] + '\n' if schedule[i]['location'][j] != 'None' else '\n') + schedule[i]['type'][j] + '\n'
			sended_message += '\n'
		sended_message += '\n'

	if sended_message == '':
		sended_message = '–ü–∞—Ä –Ω–µ—Ç –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ'

	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=sended_message)
	print('\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ù–µ–¥–µ–ª—è):\n\n', group_name, '\n', sended_message, '\n')

@bot.callback_query_handler(func=lambda call: call.data == 'next_laba')
def next_laba(call):
	group_name = opendb().find_gr(call.message)
	print(group_name)
	dates, schedule = get_scheldue(group_name)
	
	done = False
	i = 0
	
	while not done:
		try:
			day = schedule[i]
		
		except IndexError:
			sended_message = '–õ–∞–±—ã –Ω–µ —Å–∫–æ—Ä–æ :)'
		
		try:
			done = True
			
			lsn_indx = day['type'].index('–õ–†')
			lctr = ('üë§{}\n'.format(day['lecturer'][lsn_indx]['name']) if (day['lecturer'][lsn_indx]['name'] != 'None') else '')
			lctn = 'üìç{}\n'.format(day['location'][lsn_indx]) if day['location'][lsn_indx] != 'None' else '\n'
			sended_message = '–°–ª–µ–¥—É–±—â–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è:\n\n===== {} =====\n‚åö {}\nüìù{}\n{}{}'.format(dates[i], day['time'][lsn_indx], day['title'][lsn_indx], lctr, lctn) 
			
		except:
			done = False
			
		i += 1
	bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=sended_message)
	print('\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ù–µ–¥–µ–ª—è):\n\n', group_name, '\n', sended_message, '\n')


@bot.message_handler(func=lambda message: '–û–± –∞–≤—Ç–æ—Ä–∞—Ö' == message.text)
def developers(message):
	print(datetime.now(), '\ncredits –æ—Ç', message.chat.id)
	bot.send_message(message.chat.id, config.contacts)


@bot.message_handler(func=lambda message: current_func == 'change_group')
def change_gr(message):
	print('\n–ü–æ–º–µ–Ω—è–π –≥—Ä—É–ø–ø—É ', message.chat.id, datetime.now())

	all_groups = get_grp_list()

	if not (message.text in all_groups):
		bot.send_message(message.chat.id, config.completef)
		return

	opendb().upd_gr(message)

	bot.send_message(message.chat.id, config.completet)
	handle_help(message)


@bot.message_handler(content_types=["text"])  # –û–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def repeat_all_messages(message):
	all_groups = get_grp_list()

	user_row = opendb().find_usr(message)

	print('User_row:', user_row)
	print(datetime.now(), '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –°–æ–æ–±—â–µ–Ω–∏–µ - ', message.text, user_row)
	
	if user_row == None or user_row[2] == None:
		msg = bot.send_message(message.chat.id, '–ê —É —Ç–µ–±—è —Ç—É—Ç –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —à–∏—Ñ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú**-****-** (–ï—Å–ª–∏ –Ω–µ —Ä–∞–Ω–µ–µ 2016 –≥–æ–¥–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è) –∏–ª–∏ **-****-** (–í –∏–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö) (–¢—Ä–µ—Ç—å—è –∑–≤–µ–∑–¥–æ—á–∫–∞ - –±—É–∫–≤–∞ –û, –∞ –Ω–µ –Ω–æ–ª–∏–∫! [–≠—Ç–æ –¥–ª—è –æ—á–Ω–∏–∫–æ–≤, –≤ –≤–µ—á–µ—Ä–∫–µ —Ç–∞–º –í]), –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú4–û-211–ë-16 –∏–ª–∏ 4–û-404–ë-14, –µ—Å–ª–∏ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫ –∫–æ–º—É-—Ç–æ, —Ç–æ *-***-****-**')
		if user_row == None:
			opendb().ins_id(message)
		
		bot.register_next_step_handler(msg, change_gr)
	
	
if __name__ == '__main__':
	current_func = ''
	bot.polling(none_stop=True)  # –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ

# cur.execute('INSERT INTO Logins VALUES (?,?,?,?)', [message.chat.id, message.chat.username, course, gruppa])
# con.commit()
#		print(message.chat.username, "–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –ø–æ –ø–∏–≤—É!")
#		bot.send_message(message.chat.id, '–†–∞–∑—Ä–∞–± —É–∂–µ –æ–ø–æ–≤–µ—â–µ–Ω –∏ —Ä–∞–¥ —Å–ª—ã—à–∞—Ç—å! (–ì–ª–∞–≤–Ω–æ–µ - —á—Ç–æ–± –Ω–µ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–µ. –†–∞–∑—Ä–∞–± –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–µ –±–æ–ª—å—à–µ –Ω–µ –ø—å–µ—Ç..)')
#		bot.send_message('64634999', '@' + message.chat.username + ' –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –≤—ã–ø–∏—Ç—å –ø–æ –ø–∏–≤—É!')
